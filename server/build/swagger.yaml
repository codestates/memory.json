openapi: 3.0.0
info:
  title: Sample API
  description: 'Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.'
  version: 0.1.9
host: 'http://localhost:4000'
basePath: /
servers:
  - url: 'http://localhost:4000'
    description: Memory.json API에 오신것을 환영합니다!
paths:
  /users:
    get:
      tags:
        - /users
      summary: 유저 회원정보 조회 기능
      parameters:
        $ref: '#/paths/~1users~1signout/parameters'
      responses:
        '200':
          description: 유저정보조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 10001
                  user_name:
                    type: string
                  user_account:
                    type: string
                    example: test9911
                  profile:
                    type: string
                    example: test.png
                  social_id:
                    type: number
                    example: 1020201
                  provider:
                    type: string
                    example: kakao
                  email:
                    type: email
                  address:
                    type: string
                    example: 서울특별시
                  age:
                    type: number
                    example: 25
                  sex:
                    type: string
                    example: F
                  createdAt:
                    type: string
                    example: 2022-06-09T04:54:20.000Z
                  updatedAt:
                    type: strings
                    example: 2022-06-09T04:54:20.000Z
        '401':
          $ref: '#/paths/~1users~1signout/responses/401'
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
    delete:
      tags:
        - /users
      summary: 유저 회원탈퇴 기능
      parameters:
        $ref: '#/paths/~1users~1signout/parameters'
      responses:
        '204':
          description: 회원탈퇴에 성공하였을때
        '401':
          $ref: '#/paths/~1users~1signout/responses/401'
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
    patch:
      tags:
        - /users
      summary: 유저 회원정보 수정 기능
      parameters:
        $ref: '#/paths/~1users~1signout/parameters'
      requestBody:
        description: 유저 회원 수정 정보가 필요합니다.
        required: true
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
                mobile:
                  type: string
                email:
                  type: string
                age:
                  type: string
      responses:
        '200':
          description: 유저 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema'
        '401':
          $ref: '#/paths/~1users~1signout/responses/401'
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
  /users/signup:
    post:
      tags:
        - /users
      summary: 유저 로컬 회원가입 기능
      requestBody:
        description: 유저 회원 가입 정보가 필요합니다.
        required: true
        content:
          application/json:
            schema:
              required:
                - password
                - user_account
                - user_name
              properties:
                user_name:
                  type: string
                user_account:
                  type: string
                password:
                  type: string
                mobile:
                  type: string
                email:
                  type: email
                address:
                  type: string
                age:
                  type: number
                sex:
                  type: string
                  example: F
      responses:
        '200':
          description: 유저 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/200/content/application~1json/schema'
        '400':
          description: bad request
        '409':
          description: 이미 존재하는 회원가입정보
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
  /users/signin:
    post:
      tags:
        - /users
      summary: 유저 로그인 기능
      requestBody:
        description: 유저 회원 가입 정보가 필요합니다.
        required: true
        content:
          application/json:
            schema:
              required:
                - password
                - user_account
              properties:
                password:
                  type: string
                user_account:
                  type: string
      responses:
        '200':
          description: 유저 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  message:
                    type: string
                    example: login success
        '400':
          description: email 이나 비밀번호가 없을 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 로그인 정보를 확인해주세요
        '401':
          description: user_account와 password와 일치하는 정보가 DB에 없을경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 허가되지 않은 로그인입니다
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
  /users/socialbygoogle:
    post:
      tags:
        - /users
      summary: 구글 소셜 로그인 기능
      responses:
        '200':
          description: 유저 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1signin/post/responses/200/content/application~1json/schema'
        '400':
          description: bad request
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
  /users/socialbykakao:
    post:
      tags:
        - /users
      summary: 카카오 소셜 로그인 기능
      responses:
        '200':
          description: 유저 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1signin/post/responses/200/content/application~1json/schema'
        '400':
          description: bad request
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
  /users/signout:
    tags:
      - /users
    summary: 유저 로그아웃 기능
    parameters:
      - in: header
        name: accessToken
        description: 헤더에 토큰을 입력하세요
        required: true
        schema:
          type: string
        examples:
          Sample:
            value: accesstoken
            summary: A sample token
    responses:
      '200':
        description: 로그아웃 성공
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Logout is Success!
      '401':
        description: 토큰인증 오류
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 로그인을 확인해주세요!
      '500':
        description: 내부서버 오류
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 내부서버 오류입니다!
  /users/profile:
    post:
      tags:
        - /users
      summary: 유저 프로필 사진 업로드 기능
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
          $ref: '#/paths/~1users~1signout/parameters'
  /places:
    get:
      tags:
        - /places
      summary: place의 주소 또는 place 이름에 포함된 문자열을 통하여 해당하는 place리스트를 반환합니다.
      parameters:
        - in: query
          name: place_address
          schema:
            type: string
            example: 용산구
      responses:
        '200':
          description: 장소목록 조회 성공
          content:
            application.json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1001
                  user_id:
                    type: number
                    example: 1001
                  place_name:
                    type: string
                    example: null
                  place_address:
                    type: string
                    example: 서울특별시 용산구 한강대로 405
                  place_lat:
                    type: string
                    example: 45.1928
                  place_lng:
                    type: string
                    example: 34.293
                  createdAt:
                    type: string
                    example: 2022-05-24T12:27:19.000Z
                  updatedAt:
                    type: string
                    example: 2022-05-24T12:27:19.000Z
                  message:
                    type: string
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
  '/histories/{placeId}':
    post:
      tags:
        - /histories
      summary: 새로운 history를 등록하기 위한 요청을 보냅니다.
      parameters:
        - in: path
          name: placeId
          required: true
          schema:
            type: integer
            minimum: 1
          description: place Id를 입력해야 합니다.
      requestBody:
        description: history 생성 정보가 필요합니다.
        required: true
        content:
          application/json:
            schema:
              properties:
                history_title:
                  type: string
                history_content:
                  type: string
                history_year:
                  type: number
                  exmaple: 1980
      responses:
        '201':
          description: history 등록 성공
          content:
            application.json:
              schema:
                type: object
                properties:
                  historyInfo:
                    $ref: '#/paths/~1histories~1user~1%7BuserId%7D/get/responses/200/content/application.json/schema/properties/data'
                  photoInfo:
                    type: object
                    properties:
                      id:
                        type: number
                      history_id:
                        type: number
                      image_name:
                        type: string
                      thumbnail:
                        type: string
                      createdAt:
                        type: string
                      updatedAt:
                        type: string
                  placeInfo:
                    $ref: '#/paths/~1places/get/responses/200/content/application.json/schema'
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
  '/histories/place/{placeId}':
    get:
      tags:
        - /histories
      summary: place에 기록되어 있는 history의 목록을 조회하기 위한 요청을 보냅니다.
      parameters:
        - in: path
          name: placeId
          required: true
          schema:
            type: integer
            minimum: 1
          description: place Id를 입력해야 합니다.
      responses:
        '200':
          description: history 목록 조회 성공
          content:
            application.json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/paths/~1histories~1user~1%7BuserId%7D/get/responses/200/content/application.json/schema/properties/data'
                  message:
                    type: string
        '404':
          description: not found
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
  '/histories/user/{userId}':
    get:
      tags:
        - /histories
      summary: user가 작성한 history 목록을 조회합니다.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            minimum: 1
          description: user Id를 입력해야 합니다.
      responses:
        '200':
          description: history 목록 조회 성공
          content:
            application.json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      place_id:
                        type: number
                      user_id:
                        type: number
                      history_title:
                        type: string
                        example: 제목입니다
                      history_content:
                        type: string
                        example: 내용입니다
                      history_year:
                        type: number
                      createdAt:
                        type: string
                      updatedAt:
                        type: string
                  message:
                    type: string
        '500':
          $ref: '#/paths/~1users~1signout/responses/500'
components:
  responses:
    successResponse:
      description: successful request
      content:
        application/json:
          schema:
            type: object
            properties: null
